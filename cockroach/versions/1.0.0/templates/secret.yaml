---
kind: secret
name: {{ .Release.Name }}-cockroach-startup
description: CockroachDB startup script
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    # Runtime env provided by Control Plane
    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}

    # Extract replica index + workload from HOSTNAME
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    WORKLOAD_NAME=$(echo "${HOSTNAME}" | sed 's/-[0-9]*$//')
    GVC="{{ .Values.gvc.name }}"

    # Self FQDN
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"

    # Build join list at runtime
    JOIN_HOSTS=""
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"
    REPLICAS="{{ range .Values.gvc.locations }}{{ .replicas }} {{ end }}"

    loc_index=0
    for loc in $LOCATIONS; do
      replica_count=$(echo $REPLICAS | cut -d' ' -f$((loc_index + 1)))
      for i in $(seq 0 $((replica_count - 1))); do
        host="replica-${i}.{{ .Values.cockroach_defaults.workload_name }}.${loc}.${GVC}.cpln.local"
        if [[ "$host" != "$SELF_FQDN" ]]; then
          JOIN_HOSTS="${JOIN_HOSTS},${host}"
        fi
      done
      loc_index=$((loc_index + 1))
    done

    JOIN_HOSTS=${JOIN_HOSTS#,}  # trim leading comma

    echo "Starting CockroachDB on $SELF_FQDN with join [$JOIN_HOSTS]"

    cmd=(
      cockroach start \
        --insecure \
        --listen-addr=0.0.0.0:{{ .Values.cockroach_defaults.sql_port }} \
        --http-addr=0.0.0.0:{{ .Values.cockroach_defaults.http_port }} \
        --advertise-host="$SELF_FQDN" \
        --join="$JOIN_HOSTS" \
        --background
    )
    echo "Running: ${cmd[*]}"
    "${cmd[@]}"

    # Cluster init only for replica-0 of first location
    FIRST_LOCATION="{{ (index .Values.gvc.locations 0).name }}"
    if [[ "$REPLICA_INDEX" == "0" && "$LOCATION" == "$FIRST_LOCATION" ]]; then
      echo "Attempting to initialize cluster..."
      if cockroach init --insecure --host="$SELF_FQDN:{{ .Values.cockroach_defaults.sql_port }}" >/dev/null 2>&1; then
        echo "Cluster initialized. Creating DB + user..."
        cockroach sql --insecure --host="$SELF_FQDN:{{ .Values.cockroach_defaults.sql_port }}" <<EOF
        CREATE DATABASE IF NOT EXISTS {{ .Values.database.name }};
        CREATE USER IF NOT EXISTS {{ .Values.database.user }};
        GRANT ALL ON DATABASE {{ .Values.database.name }} TO {{ .Values.database.user }};
    EOF
      else
        echo "Init skipped (likely already initialized)."
      fi
    fi

    echo "CockroachDB is running. Sleeping forever..."
    sleep infinity
---
kind: secret
name: {{ .Release.Name }}-cockroach-user
description: cockroach user
type: opaque
data:
  encoding: plain
  payload: {{ .Values.database.user }}
