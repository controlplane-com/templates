---
kind: workload
name: {{ .Values.cockroach_defaults.workload_name }}
description: CockroachDB cluster across multiple locations
spec:
  type: stateful
  containers:
    - name: {{ .Values.cockroach_defaults.workload_name }}
      cpu: {{ .Values.resources.cpu }}
      memory: {{ .Values.resources.memory }}
      image: cockroachdb/cockroach:latest-v25.2
      command: ["/bin/bash", "/cockroach/start.sh"]
      inheritEnv: false
      env:
        - name: DB_NAME
          value: {{ .Values.database.name }}
        - name: DB_USER
          value: cpln://secret/cockroach-user.payload
      ports:
        - number: {{ .Values.cockroach_defaults.http_port }}
          protocol: http
        - number: {{ .Values.cockroach_defaults.sql_port }}
          protocol: tcp
      volumes:
        - path: /cockroach/cockroach-data
          recoveryPolicy: retain
          uri: cpln://volumeset/cockroach-vs
        - path: /cockroach/start.sh
          uri: cpln://secret/cockroach-startup.payload
  defaultOptions:
    autoscaling:
      maxConcurrency: 0
      maxScale: {{ (index .Values.gvc.locations 0).replicas | int }}
      metric: disabled
      minScale: {{ (index .Values.gvc.locations 0).replicas | int }}
      scaleToZeroDelay: 300
      target: 100
    capacityAI: false
    debug: false
    suspend: false
    timeoutSeconds: 10
  firewallConfig:
    external:
      {{- if .Values.allow_clients }}
      inboundAllowCIDR:
        {{- range $client := .Values.allow_clients }}
        - {{ $client }}
        {{- end }}
      {{- end }}
      outboundAllowCIDR:
      - 0.0.0.0/0
    internal:
      inboundAllowType: same-gvc
  identityLink: //gvc/{{ .Values.gvc.name }}/identity/cockroach-identity
  loadBalancer:
    replicaDirect: true
  localOptions:
    {{- range $location := .Values.gvc.locations }}
    - autoscaling:
        maxConcurrency: 0
        maxScale: {{ if eq ($location.replicas | int) 0 }}1{{ else }}{{ $location.replicas | int }}{{ end }}
        metric: disabled
        minScale: {{ if eq ($location.replicas | int) 0 }}0{{ else }}{{ $location.replicas | int }}{{ end }}
        scaleToZeroDelay: 300
        target: 100
      capacityAI: false
      debug: false
      location: //location/{{ $location.name }}
      suspend: {{ if eq ($location.replicas | int) 0 }}true{{ else }}false{{ end }}
      timeoutSeconds: 10
    {{- end }}
  supportDynamicTags: false