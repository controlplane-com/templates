---
kind: secret
name: {{ .Release.Name }}-etcd-startup
description: etcd startup script
tags:
  {{- include "etcd.tags" . | nindent 4 }}
type: opaque
data:
  encoding: plain
  payload: |-
    #!/bin/bash
    set -euo pipefail

    # Runtime env provided by Control Plane
    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}

    # Extract replica index from HOSTNAME
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    WORKLOAD_NAME=$(echo "${HOSTNAME}" | sed 's/-[0-9]*$//')

    # Self FQDN for peer URLs
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.{{ .Values.global.cpln.gvc }}.cpln.local"

    # Build initial cluster list based on replicas
    INITIAL_CLUSTER=""
    for i in $(seq 0 $(({{ .Values.replicas }} - 1))); do
      peer="replica-${i}.${WORKLOAD_NAME}.${LOCATION}.{{ .Values.global.cpln.gvc }}.cpln.local"
      entry="${WORKLOAD_NAME}-${i}=http://${peer}:2380"
      if [[ -z "$INITIAL_CLUSTER" ]]; then
        INITIAL_CLUSTER="$entry"
      else
        INITIAL_CLUSTER="${INITIAL_CLUSTER},$entry"
      fi
    done

    # Determine cluster state
    if [ -d "/var/lib/etcd/member" ] && [ "$(ls -A /var/lib/etcd/member)" ]; then
        INITIAL_CLUSTER_STATE="existing"
    else
        INITIAL_CLUSTER_STATE="new"
    fi

    echo "Starting etcd with cluster state: $INITIAL_CLUSTER_STATE"

    # Run etcd
    exec etcd \
      --name "${WORKLOAD_NAME}-${REPLICA_INDEX}" \
      --data-dir /var/lib/etcd \
      --listen-client-urls "http://0.0.0.0:2379" \
      --advertise-client-urls "http://${SELF_FQDN}:2379" \
      --listen-peer-urls "http://0.0.0.0:2380" \
      --initial-advertise-peer-urls "http://${SELF_FQDN}:2380" \
      --initial-cluster "$INITIAL_CLUSTER" \
      --initial-cluster-state "$INITIAL_CLUSTER_STATE" \
      --heartbeat-interval 1000 \
      --election-timeout 50000
