kind: secret
name: {{ include "kafka.name" . }}-controller-configuration
type: opaque
data:
  encoding: plain
  payload: |
    # Listeners configuration

    listeners-placeholder
    advertised.listeners=INTERNAL://advertised-address-placeholder:9094{{- range .Values.kafka.listeners }}{{- include "kafka.validateListenerConfig" . }},{{ .name | upper }}://advertised-{{ .name | lower }}-address-placeholder{{- end }}
    listener.security.protocol.map=INTERNAL:SASL_PLAINTEXT,CONTROLLER:SASL_PLAINTEXT{{- range .Values.kafka.listeners }},{{ .name | upper }}:{{ .protocol }}{{- end }}

    # KRaft process roles
    process.roles=process-roles-placeholder

    #node.id=
    controller.listener.names=CONTROLLER
    {{$replicaCount := int .Values.kafka.replicas -}}
    {{- if eq $replicaCount 2 -}}
    {{- fail "Invalid number of Kraft replicas: must not be 2" -}}
    {{- end -}}
    controller.quorum.voters= {{- $result := "" }}
    {{- range $i := until $replicaCount }}
      {{- if and (ge $i 0) (lt $i 5) }}
        {{- if $i }}
          {{- $result = print $result "," }}
        {{- end }}
        {{- $result = print $result (printf "%d@%s-%s-%d.%s-%s:9093" $i $.Release.Name $.Values.kafka.name $i $.Release.Name $.Values.kafka.name ) }}
      {{- end }}
    {{- end }}
    {{- $result }}

    # Kraft Controller listener SASL settings
    sasl.mechanism.controller.protocol=PLAIN
    listener.name.controller.sasl.enabled.mechanisms=PLAIN
    listener.name.controller.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="controller_user" password="controller-password-placeholder" user_controller_user="controller-password-placeholder";
    # log.dir=/bitnami/kafka/data
    sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512

    # Interbroker configuration
    inter.broker.listener.name=INTERNAL
    sasl.mechanism.inter.broker.protocol=PLAIN

    # Listeners SASL JAAS configuration
{{- range .Values.kafka.listeners }}
  {{- include "kafka.validateAuthConfig" . }}
  {{- if .sasl }}
    listener.name.{{ .name | lower }}.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required user_kafka-admin="password-placeholder-0"{{- $users := .sasl.users | split "," }}{{- $passwords := .sasl.passwords | split "," }}{{- range $index, $user := $users }}{{- $password := index $passwords $index }} user_{{ $user | lower }}="{{ $password }}";{{- end }}
    listener.name.{{ .name | lower }}.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required{{- range $index, $user := $users }}{{- $password := index $passwords $index }} user_{{ $user | lower }}="{{ $password }}";{{- end }}
    listener.name.{{ .name | lower }}.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required{{- range $index, $user := $users }}{{- $password := index $passwords $index }} user_{{ $user | lower }}="{{ $password }}";{{- end }}
  {{- end }}
{{- end }}
    listener.name.internal.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="inter_broker_user" password="interbroker-password-placeholder" user_inter_broker_user="interbroker-password-placeholder" user_kafka-admin="password-placeholder-0";
    listener.name.internal.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    listener.name.internal.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    # End of SASL JAAS configuration

    # Enable ACL
    # authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer
    authorizer.class.name=org.apache.kafka.metadata.authorizer.StandardAuthorizer
    super.users=User:kafka-admin;User:controller_user;User:inter_broker_user
    # allow.everyone.if.no.acl.found=true

    default.replication.factor={{ .Values.kafka.configurations.default_replication_factor }}
    auto.create.topics.enable={{ .Values.kafka.configurations.auto_create_topics_enable }}
    log.dirs={{ .Values.kafka.logDirs }}
    log.retention.hours={{ .Values.kafka.configurations.log_retention_hours }}
