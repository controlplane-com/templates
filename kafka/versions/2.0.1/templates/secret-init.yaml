kind: secret
name: {{ include "kafka.name" . }}-init
type: opaque
data:
  encoding: plain
  payload: |
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    WORKLOAD_NAME=$(echo $CPLN_WORKLOAD | sed 's|.*/workload/\([^/]*\)$|\1|')

    error(){
        local message="${1:?missing message}"
        echo "ERROR: ${message}"
        exit 1
    }

    retry_while() {
        local -r cmd="${1:?cmd is missing}"
        local -r retries="${2:-12}"
        local -r sleep_time="${3:-5}"
        local return_value=1

        read -r -a command <<< "$cmd"
        for ((i = 1 ; i <= retries ; i+=1 )); do
            "${command[@]}" && return_value=0 && break
            sleep "$sleep_time"
        done
        return $return_value
    }

    replace_in_file() {
        local filename="${1:?filename is required}"
        local match_regex="${2:?match regex is required}"
        local substitute_regex="${3:?substitute regex is required}"
        local posix_regex=${4:-true}

        local result

        # We should avoid using 'sed in-place' substitutions
        # 1) They are not compatible with files mounted from ConfigMap(s)
        # 2) We found incompatibility issues with Debian10 and "in-place" substitutions
        local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
        if [[ $posix_regex = true ]]; then
            result="$(sed -E "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        else
            result="$(sed "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        fi
        echo "$result" > "$filename"
    }

    kafka_conf_set() {
        local file="${1:?missing file}"
        local key="${2:?missing key}"
        local value="${3:?missing value}"

        # Check if the value was set before
        if grep -q "^[#\\s]*$key\s*=.*" "$file"; then
            # Update the existing key
            replace_in_file "$file" "^[#\\s]*${key}\s*=.*" "${key}=${value}" false
        else
            # Add a new key
            printf '\n%s=%s' "$key" "$value" >>"$file"
        fi
    }

    replace_placeholder() {
        local placeholder="${1:?missing placeholder value}"
        local password="${2:?missing password value}"
        sed -i "s|$placeholder|$password|g" "$KAFKA_CONFIG_FILE"
    }

    configure_external_access() {
        # Configure external hostname
        if [[ -f "/shared/external-host.txt" ]]; then
            host=$(cat "/shared/external-host.txt")
        elif [[ -n "${EXTERNAL_ACCESS_HOST:-}" ]]; then
            host="$EXTERNAL_ACCESS_HOST"
        elif [[ -n "${EXTERNAL_ACCESS_HOSTS_LIST:-}" ]]; then
            read -r -a hosts <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_HOSTS_LIST}")"
            host="${hosts[$POD_ID]}"
        elif [[ "$EXTERNAL_ACCESS_HOST_USE_PUBLIC_IP" =~ ^(yes|true)$ ]]; then
            host=$(curl -s https://ipinfo.io/ip)
        else
            error "External access hostname not provided"
        fi

        # Configure external port
        if [[ -f "/shared/external-port.txt" ]]; then
            port=$(cat "/shared/external-port.txt")
        elif [[ -n "${EXTERNAL_ACCESS_PORT:-}" ]]; then
            if [[ "${EXTERNAL_ACCESS_PORT_AUTOINCREMENT:-}" =~ ^(yes|true)$ ]]; then
            port="$((EXTERNAL_ACCESS_PORT + POD_ID))"
            else
            port="$EXTERNAL_ACCESS_PORT"
            fi
        elif [[ -n "${EXTERNAL_ACCESS_PORTS_LIST:-}" ]]; then
            read -r -a ports <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_PORTS_LIST}")"
            port="${ports[$POD_ID]}"
        else
            error "External access port not provided"
        fi
        # Configure Kafka advertised listeners
        sed -i -E "s|^(advertised\.listeners=\S+)$|\1,EXTERNAL://${host}:${port}|" "$KAFKA_CONFIG_FILE"
    }

    configure_kafka_sasl() {

        # Replace placeholders with passwords
        replace_placeholder "interbroker-password-placeholder" "$KAFKA_INTER_BROKER_PASSWORD"
        replace_placeholder "controller-password-placeholder" "$KAFKA_CONTROLLER_PASSWORD"
    }

    export KAFKA_CONFIG_FILE=/opt/bitnami/kafka/config/server.properties
    cp /configmaps/server.properties $KAFKA_CONFIG_FILE

    # Get pod ID and role, last and second last fields in the pod name respectively
    POD_ID=$(echo "$POD_NAME" | rev | cut -d'-' -f 1 | rev)
    export KAFKA_CFG_NODE_ID="$POD_ID"
    # POD_ROLE=$(echo "$POD_NAME" | rev | cut -d'-' -f 2 | rev)

    # Configure POD Role
    if [ "$POD_ID" -le 4 ]; then
        replace_placeholder "process-roles-placeholder" "controller,broker"
        replace_placeholder "advertised-controller-address-placeholder" "${POD_NAME}.${WORKLOAD_NAME}.${CPLN_GVC_ALIAS}.svc.cluster.local"
        replace_placeholder "listeners-placeholder" "listeners=INTERNAL://:9094,CONTROLLER://:9093{{- range $i, $key := keys .Values.kafka.listeners | sortAlpha }}
        {{- $listener := index $.Values.kafka.listeners $key -}}
        {{- include "kafka.validateListenerConfig" $listener -}},{{ $listener.name | upper }}://:{{- if $listener.publicAddress }}300${POD_ID}{{- else }}{{ $listener.containerPort }}{{- end }}{{- end }}"
    else
        replace_placeholder "process-roles-placeholder" "broker"
        replace_placeholder ",CONTROLLER://advertised-controller-address-placeholder:9093" ""
        replace_placeholder "listeners-placeholder" "listeners=INTERNAL://:9094{{- range $i, $key := keys .Values.kafka.listeners | sortAlpha }}
        {{- $listener := index $.Values.kafka.listeners $key -}}
        {{- include "kafka.validateListenerConfig" $listener -}},{{ $listener.name | upper }}://:{{- if $listener.publicAddress }}300${POD_ID}{{- else }}{{ $listener.containerPort }}{{- end }}{{- end }}"
    fi

    # Configure node.id and/or broker.id
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        if grep -q "broker.id" /bitnami/kafka/data/meta.properties; then
            ID="$(grep "broker.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
            kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        else
            ID="$(grep "node.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
            kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        fi
    else
        ID=$((POD_ID + KAFKA_MIN_ID))
        kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
    fi

    replace_placeholder "advertised-address-placeholder" "${POD_NAME}.${WORKLOAD_NAME}.${CPLN_GVC_ALIAS}.svc.cluster.local"

    {{- range $key, $listener := .Values.kafka.listeners }}
    {{- include "kafka.validateListenerConfig" . }}
    {{- if and $listener.publicAddress $listener.publicAddress }}
    replace_placeholder "advertised-{{ $listener.name | lower }}-address-placeholder" "{{ $listener.publicAddress }}:300${POD_ID}"
    {{- else }}
    replace_placeholder "advertised-{{ $listener.name | lower }}-address-placeholder" "${POD_NAME}.${WORKLOAD_NAME}.${CPLN_GVC_ALIAS}.svc.cluster.local:{{ .containerPort }}"
    {{- end }}
    {{- end }}

    if [[ "${EXTERNAL_ACCESS_ENABLED:-false}" =~ ^(yes|true)$ ]]; then
        configure_external_access
    fi

    configure_kafka_sasl

    {{- $root := . -}}
    {{- $logDirs := split "," $root.Values.kafka.logDirs }}
    {{- $counter := 0 }}
    {{- range $path := $logDirs }}
    rm -fr {{ $path }}/lost+found
    {{- $counter = add $counter 1 }}
    {{- end }}

