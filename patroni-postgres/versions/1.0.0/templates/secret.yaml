kind: secret
name: {{ Release.Name }}-postgres-config
description: {{ Release.Name }} postgres config
tags:
  {{- include "patroni-postgres.tags" . | nindent 4 }}
type: dictionary
data:
  username: {{ .Values.postgres.username }}
  password: {{ .Values.postgres.password }}


---
kind: secret
name: {{ Release.Name }}-patroni-startup
description: {{ Release.Name }} patroni startup script
type: opaque
data:
  encoding: plain
  payload: |-
    #!/bin/bash
    set -euo pipefail

    # Runtime environment provided by Control Plane
    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}

    # Extract replica index from HOSTNAME (e.g., patroni-0 -> 0)
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    WORKLOAD_NAME=$(echo "${HOSTNAME}" | sed 's/-[0-9]*$//')

    # Generate unique Patroni node name
    PATRONI_NAME="${WORKLOAD_NAME}-${REPLICA_INDEX}"

    # Self FQDN for REST API
    PATRONI_RESTAPI_CONNECT_ADDRESS="${PATRONI_NAME}.${WORKLOAD_NAME}.${LOCATION}.{{ .Values.global.cpln.gvc }}.cpln.local:8008"
    PATRONI_RESTAPI_LISTEN="0.0.0.0:8008"

    # Scope (same for all replicas)
    PATRONI_SCOPE="production-cluster"

    # Build ETCD3_HOSTS dynamically based on replicas
    ETCD3_HOSTS=""
    for i in $(seq 0 $(( {{ .Values.etcd.replicas }} - 1 )) ); do
        host="replica-${i}.${WORKLOAD_NAME}.${LOCATION}.{{ .Values.global.cpln.gvc }}.cpln.local:2379"
        if [[ -z "$ETCD3_HOSTS" ]]; then
            ETCD3_HOSTS="$host"
        else
            ETCD3_HOSTS="${ETCD3_HOSTS},$host"
        fi
    done

    # Postgres environment variables (same for all replicas)
    PGDATA="/var/lib/postgresql/data/pgdata"
    PGDATABASE="{{ .Values.postgres.database }}"
    PGUSER_SUPERUSER="cpln://secret/{{ .Release.Name }}-postgres-config.username"
    PGPASSWORD_SUPERUSER="cpln://secret/{{ .Release.Name }}-postgres-config.password"

    # Export all variables so Patroni can find them
    export PATRONI_NAME
    export PATRONI_RESTAPI_CONNECT_ADDRESS
    export PATRONI_RESTAPI_LISTEN
    export PATRONI_SCOPE
    export ETCD3_HOSTS
    export PGDATA
    export PGDATABASE
    export PGUSER_SUPERUSER
    export PGPASSWORD_SUPERUSER

    echo "Starting Patroni node '${PATRONI_NAME}' with ETCD endpoints: ${ETCD3_HOSTS}"

    # Run Patroni
    exec patroni /patroni/config.yml