kind: secret
name: {{ .Release.Name }}-secret
description: {{ .Release.Name }}-secret
tags:
  {{- include "pgadmin.tags" . | nindent 4 }}
type: dictionary
data:
  username: {{ .Values.admin_login.email }}
  password: {{ .Values.admin_login.password }}

---
kind: secret
name: pgadmin-config
description: pgadmin-config
type: opaque
data:
  encoding: plain
  payload: |-
    #!/bin/bash
    set -e

    # Start pgAdmin in the background
    /usr/pgadmin4/venv/bin/python /usr/pgadmin4/web/pgAdmin4.py &

    # Wait until pgAdmin is ready
    echo "Waiting for pgAdmin to start..."
    while ! curl -s http://localhost:5050 > /dev/null; do
        sleep 1
    done
    echo "pgAdmin started."

    # Run the registration script
    python <<'EOF'
    import requests

    PGADMIN_URL = "http://localhost:5050"
    ADMIN_EMAIL = "{{ .Values.admin_login.email }}"
    ADMIN_PASSWORD = "{{ .Values.admin_login.password }}"

    SERVER_NAME = "{{ .Values.connect_pg.serverName }}"
    PG_HOST = "{{ .Values.connect_pg.host }}"
    PG_PORT = {{ .Values.connect_pg.port }}
    PG_USER = "{{ .Values.connect_pg.user }}"
    PG_PASSWORD = "{{ .Values.connect_pg.password }}"
    PG_DB = "{{ .Values.connect_pg.database }}"

    # Log in to pgAdmin
    login_resp = requests.post(
        f"{PGADMIN_URL}/browser/login",
        data={"email": ADMIN_EMAIL, "password": ADMIN_PASSWORD}
    )
    login_resp.raise_for_status()
    cookies = login_resp.cookies

    # Register server
    payload = {
        "name": SERVER_NAME,
        "group": "Servers",
        "host": PG_HOST,
        "port": PG_PORT,
        "username": PG_USER,
        "password": PG_PASSWORD,
        "db": PG_DB,
        "sslmode": "prefer"
    }

    resp = requests.post(
        f"{PGADMIN_URL}/browser/server/objects",
        cookies=cookies,
        json=payload
    )
    if resp.status_code == 200:
        print("Server registered successfully!")
    else:
        print("Failed to register server:", resp.text)
    EOF

        # Keep pgAdmin in the foreground
        fg