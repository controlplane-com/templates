---
kind: secret
name: tidb-pd-startup
description: TiDB placement driver startup script
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    # Runtime environment from Control Plane
    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}
    GVC="{{ .Values.gvc.name }}"

    # Extract replica index + workload from HOSTNAME
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    WORKLOAD_NAME="{{ .Release.Name }}-pd"

    # Self FQDN for advertise
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"

    # Build the PD cluster peer list using only index 0 of each location
    JOIN_HOSTS=""
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"

    for loc in $LOCATIONS; do
      peer_name="${loc}-0"
      peer_url="http://replica-0.${WORKLOAD_NAME}.${loc}.${GVC}.cpln.local:2380"
      JOIN_HOSTS="${JOIN_HOSTS},${peer_name}=${peer_url}"
    done

    JOIN_HOSTS=${JOIN_HOSTS#,}  # remove leading comma

    echo "Generating pd.toml for $SELF_FQDN with peers: $JOIN_HOSTS"

    # Create /etc/pd directory if it doesn't exist
    mkdir -p /etc/pd

    # Generate the config file
    cat > /etc/pd/pd.toml <<EOF
    name = "${LOCATION}-${REPLICA_INDEX}"
    data-dir = "/data"

    client-urls = "http://0.0.0.0:2379"
    peer-urls   = "http://0.0.0.0:2380"
    advertise-client-urls = "http://${SELF_FQDN}:2379"
    advertise-peer-urls   = "http://${SELF_FQDN}:2380"
    initial-cluster = "${JOIN_HOSTS}"
    EOF
    echo advertise-peer-urls   = "http://${SELF_FQDN}:2380"
    echo initial-cluster = "${JOIN_HOSTS}"

    echo "pd.toml generated successfully at /etc/pd/pd.toml"

    # Start PD using the config file
    exec /pd-server --config /etc/pd/pd.toml