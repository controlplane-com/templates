---
kind: secret
name: tidb-pd-startup
description: TiDB placement driver startup script
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    # Runtime environment from Control Plane
    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}
    GVC="{{ .Values.gvc.name }}"
    WORKLOAD_NAME="{{ .Release.Name }}-pd"

    # Extract replica index from HOSTNAME
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"

    # Bootstrap node is first replica of first location
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"
    FIRST_LOCATION=$(echo $LOCATIONS | awk '{print $1}')
    BOOTSTRAP_FQDN="replica-0.${WORKLOAD_NAME}.${FIRST_LOCATION}.${GVC}.cpln.local"

    echo "Generating pd.toml for $SELF_FQDN"
    mkdir -p /data /etc/pd

    # Determine node role
    IS_BOOTSTRAP=false
    FORCE_NEW_CLUSTER=false

    if [[ "$LOCATION" == "$FIRST_LOCATION" && "$REPLICA_INDEX" == "0" ]]; then
        IS_BOOTSTRAP=true
        echo "This is the primary bootstrap replica."

        # Check if cluster exists
        MEMBERS_JSON=$(curl -s "http://${BOOTSTRAP_FQDN}:2379/pd/api/v1/members" || true)
        if echo "$MEMBERS_JSON" | grep -q '"members":\['; then
            echo "Cluster members found, skipping force-new-cluster"
        else
            echo "No valid cluster detected, using force-new-cluster"
            FORCE_NEW_CLUSTER=true
        fi
    else
        echo "This replica will join the existing cluster via ${BOOTSTRAP_FQDN}"
    fi

    # Generate PD config
    cat > /etc/pd/pd.toml <<EOF
    name = "${LOCATION}-${REPLICA_INDEX}"
    data-dir = "/data"

    client-urls = "http://0.0.0.0:2379"
    peer-urls   = "http://0.0.0.0:2380"
    advertise-client-urls = "http://${SELF_FQDN}:2379"
    advertise-peer-urls   = "http://${SELF_FQDN}:2380"
    tick-interval = "1000ms"
    election-interval = "5000ms"
    EOF

    # Only bootstrap node sets initial cluster
    if [[ "$IS_BOOTSTRAP" == "true" ]]; then
        cat >> /etc/pd/pd.toml <<EOF
    initial-cluster = "${LOCATION}-${REPLICA_INDEX}=http://${SELF_FQDN}:2380"
    initial-cluster-state = "new"
    initial-cluster-token = "pd-cluster"
    EOF
    fi

    echo "pd.toml generated successfully at /etc/pd/pd.toml"
    echo "force-new-cluster=${FORCE_NEW_CLUSTER}"

    # Start PD
    if [[ "$IS_BOOTSTRAP" == "true" ]]; then
        if [[ "$FORCE_NEW_CLUSTER" == "true" ]]; then
            echo "Starting PD bootstrap with --force-new-cluster"
            exec /pd-server --config=/etc/pd/pd.toml --force-new-cluster
        else
            echo "Starting PD bootstrap normally"
            exec /pd-server --config=/etc/pd/pd.toml
        fi
    else
        echo "Non-bootstrap node detected. Sleeping 15s before joining cluster..."
        sleep 15
        echo "Starting PD and joining cluster at ${BOOTSTRAP_FQDN}"
        exec /pd-server --config=/etc/pd/pd.toml --join="http://${BOOTSTRAP_FQDN}:2379"
    fi
