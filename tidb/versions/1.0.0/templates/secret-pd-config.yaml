---
kind: secret
name: tidb-pd-startup
description: TiDB placement driver startup script
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}
    GVC="{{ .Values.gvc.name }}"
    WORKLOAD_NAME="{{ .Release.Name }}-pd"

    # Extract replica index from HOSTNAME
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"

    # Bootstrap node is first replica of first location
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"
    FIRST_LOCATION=$(echo $LOCATIONS | awk '{print $1}')
    BOOTSTRAP_FQDN="replica-0.${WORKLOAD_NAME}.${FIRST_LOCATION}.${GVC}.cpln.local"

    mkdir -p /data /etc/pd

    IS_BOOTSTRAP=false
    FORCE_NEW_CLUSTER=false

    if [[ "$LOCATION" == "$FIRST_LOCATION" && "$REPLICA_INDEX" == "0" ]]; then
        IS_BOOTSTRAP=true
        echo "This is the primary bootstrap replica."

        # Check if cluster exists
        MEMBERS_JSON=$(curl -s "http://${BOOTSTRAP_FQDN}:2379/pd/api/v1/members" || echo "{}")
        if echo "$MEMBERS_JSON" | jq -e '.members and (.members | length > 0)' >/dev/null 2>&1; then
            echo "Cluster members found, skipping force-new-cluster"
        else
            echo "No valid cluster detected, using force-new-cluster"
            FORCE_NEW_CLUSTER=true
        fi
    else
        echo "This replica will join the existing cluster via ${BOOTSTRAP_FQDN}"
    fi

    cat > /etc/pd/pd.toml <<EOF
    name = "${LOCATION}-${REPLICA_INDEX}"
    data-dir = "/data"

    client-urls = "http://0.0.0.0:2379"
    peer-urls   = "http://0.0.0.0:2380"
    advertise-client-urls = "http://${SELF_FQDN}:2379"
    advertise-peer-urls   = "http://${SELF_FQDN}:2380"
    EOF

    # Only bootstrap node sets initial cluster
    if [[ "$IS_BOOTSTRAP" == "true" ]]; then
        cat >> /etc/pd/pd.toml <<EOF
    initial-cluster-state = "new"
    initial-cluster-token = "pd-cluster"
    initial-cluster = ""
    lease = 7
    election-timeout = "3s"
    heartbeat-interval = "1s"
    EOF
        echo "Bootstrap config file written"
    fi

    if [[ "$IS_BOOTSTRAP" == "true" ]]; then
        if [[ "$FORCE_NEW_CLUSTER" == "true" ]]; then
            echo "Starting PD bootstrap with --force-new-cluster"
            exec /pd-server --config=/etc/pd/pd.toml --force-new-cluster
        else
            echo "Starting PD bootstrap normally"
            exec /pd-server --config=/etc/pd/pd.toml
        fi
    else
        # Wait for bootstrap PD to be healthy
        until curl -sf "http://${BOOTSTRAP_FQDN}:2379/pd/api/v1/members" \
              | jq -e '.members | length >= 1' >/dev/null; do
            echo "Waiting for bootstrap PD to register at least one member..."
            sleep 5
        done
        echo "Bootstrap PD is healthy"

        # Check if this node has stale data
        if [[ -d /data/member && -n "$(ls -A /data/member 2>/dev/null)" ]]; then
            echo "Existing PD data found in /data/member. Skipping join to prevent duplicate store"
            echo "Please clear /data if this is a fresh deployment"
            exit 1
        fi

        # Join cluster
        echo "Joining cluster via ${BOOTSTRAP_FQDN}"
        exec /pd-server --config=/etc/pd/pd.toml --join="http://${BOOTSTRAP_FQDN}:2379"
    fi