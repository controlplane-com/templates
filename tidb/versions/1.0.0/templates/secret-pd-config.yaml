---
kind: secret
name: {{ .Release.Name }}-tidb-pd-startup
description: {{ .Release.Name }} TiDB placement driver startup script
tags: {{- include "tidb.tags" . | nindent 4 }}
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}
    GVC="{{ .Values.gvc.name }}"
    WORKLOAD_NAME="{{ .Release.Name }}-pd"
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"
    FIRST_LOCATION=$(echo $LOCATIONS | awk '{print $1}')
    BOOTSTRAP_FQDN="replica-0.${WORKLOAD_NAME}.${FIRST_LOCATION}.${GVC}.cpln.local"

    mkdir -p /data /etc/pd

    IS_BOOTSTRAP=false
    FORCE_NEW_CLUSTER=false

    if [[ "$LOCATION" == "$FIRST_LOCATION" && "$REPLICA_INDEX" == "0" ]]; then
        IS_BOOTSTRAP=true
        echo "This is the primary bootstrap replica."

        if [[ -d "/data/member/snap" || -d "/data/member/wal" ]]; then
            echo "Persistent data found. Normal startup."
            FORCE_NEW_CLUSTER=false
        else
            echo "No persistent data found. Bootstrapping new cluster."
            FORCE_NEW_CLUSTER=true
        fi
    else
        echo "This replica will join the existing cluster via ${BOOTSTRAP_FQDN}"
    fi

    cat > /etc/pd/pd.toml <<EOF
    name = "${LOCATION}-${REPLICA_INDEX}"
    data-dir = "/data"
    client-urls = "http://0.0.0.0:2379"
    peer-urls   = "http://0.0.0.0:2380"
    advertise-client-urls = "http://${SELF_FQDN}:2379"
    advertise-peer-urls   = "http://${SELF_FQDN}:2380"
    EOF

    if [[ "$IS_BOOTSTRAP" == "true" ]]; then
        cat >> /etc/pd/pd.toml <<EOF
    heartbeat-interval = "500ms"
    election-interval = "20000ms"
    election-timeout = "20000ms"
    tick-interval = "500ms"
    EOF
    fi

    # Start PD
    if [[ "$IS_BOOTSTRAP" == "true" ]]; then
        if [[ "$FORCE_NEW_CLUSTER" == "true" ]]; then
            echo "Starting PD bootstrap with --force-new-cluster"
            exec /pd-server --config=/etc/pd/pd.toml --force-new-cluster
        else
            echo "Starting PD bootstrap normally (no --join)"
            exec /pd-server --config=/etc/pd/pd.toml
        fi
    else
        if [[ -d "/data/member/snap" || -d "/data/member/wal" ]]; then
            echo "Persistent data found. Starting normally."
            exec /pd-server --config=/etc/pd/pd.toml
        else
            echo "Waiting for bootstrap PD to become healthy..."
            until curl -sf "http://${BOOTSTRAP_FQDN}:2379/pd/api/v1/health" \
                    | jq -e '.[0].health == true' >/dev/null \
                  && curl -sf "http://${BOOTSTRAP_FQDN}:2379/pd/api/v1/leader" \
                    | jq -e '.member_id' >/dev/null \
                  && curl -sf "http://${BOOTSTRAP_FQDN}:2379/pd/api/v1/members" \
                    | jq -e '.members | length >= 1' >/dev/null; do
                echo "Bootstrap PD not ready yet (waiting for at least 1 member)..."
                sleep 5
            done

            sleep 20

            echo "Bootstrap PD is healthy. Joining cluster."
            exec /pd-server --config=/etc/pd/pd.toml --join="http://${BOOTSTRAP_FQDN}:2379"
        fi
    fi