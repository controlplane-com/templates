---
kind: secret
name: {{ .Release.Name }}-tidb-server-startup
description: {{ .Release.Name }} TiDB server startup script
tags: {{- include "tidb.tags" . | nindent 4 }}
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}
    GVC="{{ .Values.gvc.name }}"
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    WORKLOAD_NAME="{{ .Release.Name }}-server"

    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"

    JOIN_PDS=""
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"
    for loc in $LOCATIONS; do
        pd_host="replica-0.{{ .Release.Name }}-pd.${loc}.${GVC}.cpln.local:2379"
        JOIN_PDS="${JOIN_PDS},${pd_host}"
    done
    JOIN_PDS=${JOIN_PDS#,}

    for endpoint in ${JOIN_PDS//,/ }; do
        until curl -sf "http://${endpoint}/pd/health" 2>/dev/null \
              | grep -q '"health":[[:space:]]*true'; do
            echo "Waiting for PD at $endpoint..."
            sleep 5
        done
    done
    echo "All PD endpoints are healthy."

    for pd_endpoint in ${JOIN_PDS//,/ }; do
        while true; do
            stores=$(curl -sf "http://${pd_endpoint}/pd/api/v1/stores" 2>/dev/null || echo "")
            if [ -z "$stores" ]; then
                echo "No stores found at PD $pd_endpoint yet. Retrying..."
                sleep 5
                continue
            fi

            # Normalize JSON (remove spaces after colons for state_name fields)
            stores_clean=$(echo "$stores" | sed 's/"state_name":[[:space:]]*"/"state_name":"/g')

            up_count=$(echo "$stores_clean" | grep -o '"state_name":"Up"' | wc -l)
            total_count=$(echo "$stores_clean" | grep -o '"state_name":' | wc -l)

            if [ "$total_count" -gt 0 ] && [ "$up_count" -eq "$total_count" ]; then
                echo "All $up_count TiKV stores registered with PD $pd_endpoint are Up."
                break
            else
                echo "$up_count / $total_count TiKV stores Up at PD $pd_endpoint. Waiting..."
                sleep 5
            fi
        done
    done
    echo "All TiKV stores are healthy. Proceeding to start TiDB..."

    mkdir -p /etc/tidb

    cat > /etc/tidb/tidb.toml <<EOF
    lease = "45s"

    [log]
    level = "info"

    [status]
    status-host = "0.0.0.0"
    status-port = 10080

    [pd-client]
    pd-server-timeout = 120
    EOF

    ROOT_PW="$ROOT_PW"
    APP_USER="$APP_USER"
    APP_PW="$APP_PW"
    APP_DB="$APP_DB"

    mkdir -p /etc/tidb/init
    cat > /etc/tidb/init/init.sql <<EOF
    ALTER USER 'root'@'%' IDENTIFIED BY '${ROOT_PW}';
    CREATE DATABASE IF NOT EXISTS \`${APP_DB}\`;
    CREATE USER IF NOT EXISTS '${APP_USER}'@'%' IDENTIFIED BY '${APP_PW}';
    GRANT ALL PRIVILEGES ON \`${APP_DB}\`.* TO '${APP_USER}'@'%';
    FLUSH PRIVILEGES;
    EOF

    exec /tidb-server --config /etc/tidb/tidb.toml \
        --path="${JOIN_PDS}" \
        --store="tikv" \
        --advertise-address="${WORKLOAD_NAME}.${GVC}.cpln.local" \
        --initialize-sql-file=/etc/tidb/init/init.sql
