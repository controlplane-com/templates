---
kind: secret
name: tidb-tikv-startup
description: TiDB tikv startup script
type: opaque
data:
  encoding: plain
  payload: |-
    #!/usr/bin/env bash
    set -euo pipefail

    # --- Environment ---
    LOCATION=$(basename "${CPLN_LOCATION}")
    HOSTNAME=${HOSTNAME}
    GVC="{{ .Values.gvc.name }}"
    REPLICA_INDEX=$(echo "${HOSTNAME}" | awk -F'-' '{print $NF}')
    WORKLOAD_NAME="{{ .Release.Name }}-tikv"
    SELF_FQDN="replica-${REPLICA_INDEX}.${WORKLOAD_NAME}.${LOCATION}.${GVC}.cpln.local"

    # --- Build PD endpoints ---
    PD_ENDPOINTS=""
    LOCATIONS="{{ range .Values.gvc.locations }}{{ .name }} {{ end }}"
    for loc in $LOCATIONS; do
        endpoint="replica-0.{{ .Release.Name }}-pd.${loc}.${GVC}.cpln.local:2379"
        PD_ENDPOINTS="${PD_ENDPOINTS},${endpoint}"
    done
    PD_ENDPOINTS=${PD_ENDPOINTS#,}

    # --- Check local data ---
    DATA_DIR="/data"
    if [ -d "$DATA_DIR" ] && [ "$(ls -A $DATA_DIR)" ]; then
        HAS_DATA=true
    else
        HAS_DATA=false
    fi

    echo "sleeping for 1 minute to let volume finish mounting"
    sleep 60

    # --- Wait for PD to be healthy before querying ---
    for endpoint in ${PD_ENDPOINTS//,/ }; do
        until curl -sf "http://${endpoint}/pd/health" 2>/dev/null \
              | grep -q '"health":[[:space:]]*true'; do
            echo "Waiting for PD at $endpoint..."
            sleep 5
        done
    done

    echo "PD is healthy. Starting TiKV..."

    # --- Check if store is already registered in PD ---
    PEER_URL="http://${SELF_FQDN}:20160"
    STORE_ID_EXISTS=""

    for endpoint in ${PD_ENDPOINTS//,/ }; do
        # Fetch the list of stores
        STORES_JSON=$(curl -s "http://${endpoint}/pd/api/v1/stores" 2>/dev/null)
        
        # Check if any store has the peer URL we're using
        if echo "$STORES_JSON" | grep -q "\"peer_urls\":\s*\[\"$PEER_URL\"\]"; then
            # Extract the store id using sed
            STORE_ID_EXISTS=$(echo "$STORES_JSON" \
                | sed -n 's/.*"peer_urls":\s*\["'"$PEER_URL"'"\].*"id":\([0-9]*\).*/\1/p' | head -n1)
            break
        fi
    done

    # --- Decide whether to clear local data ---
    if [ "$HAS_DATA" = true ]; then
        echo "Data dir exists, starting with existing store ID."
    elif [ -z "$STORE_ID_EXISTS" ]; then
        echo "Fresh startup, no data dir and no PD record. Starting new store."
    else
        echo "ERROR: PD has a store for $SELF_FQDN but local data is missing!"
        echo "Refusing to start to avoid duplicated store IDs."
        exit 1
    fi

    # --- Generate TiKV config ---
    mkdir -p /etc/tikv
    cat > /etc/tikv/tikv.toml <<EOF
    [server]
    addr = "0.0.0.0:20160"
    advertise-addr = "${SELF_FQDN}:20160"

    [log]
    level = "info"

    [storage]
    data-dir = "/data"
    reserve-space = "0GB"

    [pd]
    endpoints = ["${PD_ENDPOINTS//,/\",\"}"]

    [raftstore]
    raftdb-path = "/data/raft"

    [rocksdb]
    wal-dir = "/data/wal"
    EOF

    exec /tikv-server --config /etc/tikv/tikv.toml